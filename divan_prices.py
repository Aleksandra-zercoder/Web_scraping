from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
import time
import csv
import pandas as pd
import matplotlib.pyplot as plt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
options = Options()
# options.add_argument("--headless")  # –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –æ–∫–Ω–æ

driver = webdriver.Firefox(service=Service(), options=options)
driver.get("https://www.divan.ru/category/divany")
time.sleep(3)

# üîÑ –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
last_height = driver.execute_script("return document.body.scrollHeight")
while True:
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    time.sleep(2)  # –∂–¥—ë–º –ø–æ–¥–≥—Ä—É–∑–∫—É
    new_height = driver.execute_script("return document.body.scrollHeight")
    if new_height == last_height:
        break
    last_height = new_height

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
products = driver.find_elements(By.CSS_SELECTOR, 'div[data-testid="product-card"]')
print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(products)}")

results = []

for product in products:
    try:
        name = product.find_element(By.CSS_SELECTOR, 'span[itemprop="name"]').text.strip()
    except:
        name = None

    try:
        # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–∫–ª–∞—Å—Å .KIkOH)
        price_element = product.find_element(By.CSS_SELECTOR, 'span[data-testid="price"].KIkOH')
        price_text = driver.execute_script("return arguments[0].childNodes[0].textContent;", price_element)
        price = int(price_text.replace(" ", "").replace("‚ÇΩ", ""))
    except:
        price = None

    try:
        # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        old_price_element = product.find_element(By.CSS_SELECTOR, 'span[data-testid="price"].SVNym')
        old_price_text = driver.execute_script("return arguments[0].childNodes[0].textContent;", old_price_element)
        old_price = int(old_price_text.replace(" ", "").replace("‚ÇΩ", ""))
    except:
        old_price = None  # –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∏ –Ω–µ—Ç

    try:
        link_element = product.find_element(By.CSS_SELECTOR, 'a[href*="/product/"]')
        href = link_element.get_attribute("href")
        url = "https://www.divan.ru" + href if href.startswith("/") else href
    except:
        url = None

    if name and price:
        results.append({
            "name": name,
            "price": price,
            "old_price": old_price if old_price else "",
            "url": url
        })

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
with open("sofas.csv", "w", newline="", encoding="utf-8") as f:
    writer = csv.DictWriter(f, fieldnames=["name", "price", "old_price", "url"])
    writer.writeheader()
    writer.writerows(results)

print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results)} –¥–∏–≤–∞–Ω–æ–≤ –≤ 'sofas.csv'")

driver.quit()

# –ê–Ω–∞–ª–∏–∑ –∏ –≥—Ä–∞—Ñ–∏–∫
df = pd.read_csv("sofas.csv")

if not df.empty:
    avg_price = df["price"].mean()
    print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {round(avg_price):,} ‚ÇΩ")

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
    plt.hist(df["price"], bins=20, edgecolor='black')
    plt.title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ü–µ–Ω –Ω–∞ –¥–∏–≤–∞–Ω—ã")
    plt.xlabel("–¶–µ–Ω–∞, ‚ÇΩ")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    plt.grid(True)
    plt.tight_layout()
    plt.show()
else:
    print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

